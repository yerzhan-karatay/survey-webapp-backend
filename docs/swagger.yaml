definitions:
  auth.TokenResponse:
    properties:
      token:
        example: dummy token
        type: string
    required:
    - token
    type: object
  models.AuthCredentials:
    properties:
      email:
        example: mail@mail.com
        type: string
      password:
        example: "123"
        type: string
    type: object
  models.Survey:
    properties:
      created:
        type: string
      id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      created:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      password:
        type: string
      surveys:
        items:
          $ref: '#/definitions/models.Survey'
        type: array
    type: object
  survey.TitleRequest:
    properties:
      title:
        example: This is title
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      email:
        example: mail@mail.com
        type: string
      full_name:
        example: Yerzhan Karatayev
        type: string
      password:
        example: "123"
        type: string
    required:
    - email
    - password
    type: object
  user.TokenResponse:
    properties:
      token:
        example: dummy token
        type: string
    required:
    - token
    type: object
info:
  contact:
    name: API Support
  description: Survey service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Survey service API
  version: "1.0"
paths:
  /api/surveys:
    get:
      consumes:
      - application/json
      description: Survey list for loggedin user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Survey'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Survey list by user ID
      tags:
      - Surveys
    post:
      consumes:
      - application/json
      description: Survey creation
      parameters:
      - description: Survey title
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/survey.TitleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add a new Survey
      tags:
      - Surveys
  /api/surveys/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Survey by ID
      parameters:
      - description: Survey ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Survey'
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete Survey by ID
      tags:
      - Surveys
    get:
      consumes:
      - application/json
      description: Survey information by ID
      parameters:
      - description: Survey ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Survey'
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Survey info by ID
      tags:
      - Surveys
    put:
      consumes:
      - application/json
      description: Update Survey by ID
      parameters:
      - description: Survey title
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/survey.TitleRequest'
      - description: Survey ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Survey'
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update Survey by ID
      tags:
      - Surveys
  /api/users:
    post:
      consumes:
      - application/json
      description: User creation
      parameters:
      - description: Create user
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.TokenResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a new user
      tags:
      - Users
  /api/users/me:
    get:
      consumes:
      - application/json
      description: User information by token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: get user info
      tags:
      - Users
  /login:
    post:
      consumes:
      - application/json
      description: User authorization
      parameters:
      - description: Login user
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.AuthCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: User authorization
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2Application:
    authorizationUrl: ""
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: http://localhost:8080/login
    type: oauth2
swagger: "2.0"
