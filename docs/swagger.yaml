definitions:
  auth.TokenResponse:
    properties:
      token:
        example: dummy token
        type: string
    required:
    - token
    type: object
  models.AuthCredentials:
    properties:
      email:
        example: mail@mail.com
        type: string
      password:
        example: "123"
        type: string
    type: object
  models.Option:
    properties:
      created:
        type: string
      id:
        type: integer
      question_id:
        type: integer
      responseAnswers:
        items:
          $ref: '#/definitions/models.ResponseAnswer'
        type: array
      title:
        type: string
    type: object
  models.Question:
    properties:
      created:
        type: string
      id:
        type: integer
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      responseAnswers:
        items:
          $ref: '#/definitions/models.ResponseAnswer'
        type: array
      survey_id:
        type: integer
      title:
        type: string
    type: object
  models.Response:
    properties:
      created:
        type: string
      id:
        type: integer
      responseAnswers:
        items:
          $ref: '#/definitions/models.ResponseAnswer'
        type: array
      survey_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.ResponseAnswer:
    properties:
      id:
        type: integer
      option_id:
        type: integer
      question_id:
        type: integer
      response_id:
        type: integer
    type: object
  models.Survey:
    properties:
      created:
        type: string
      id:
        type: integer
      questions:
        items:
          $ref: '#/definitions/models.Question'
        type: array
      responses:
        items:
          $ref: '#/definitions/models.Response'
        type: array
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      created:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      password:
        type: string
      responses:
        items:
          $ref: '#/definitions/models.Response'
        type: array
      surveys:
        items:
          $ref: '#/definitions/models.Survey'
        type: array
    type: object
  question.TitleRequest:
    properties:
      title:
        example: This is title
        type: string
    type: object
  response.ReponseAnswerRequest:
    properties:
      option_id:
        example: 1
        type: integer
      question_id:
        example: 1
        type: integer
    type: object
  survey.FullSurveyRequest:
    properties:
      questions:
        items:
          $ref: '#/definitions/survey.QuestionRequest'
        type: array
      title:
        example: This is survey title
        type: string
    type: object
  survey.FullSurveyWithQnA:
    properties:
      questions:
        items:
          $ref: '#/definitions/survey.FullSurveyWithQnAQuestion'
        type: array
      survey:
        $ref: '#/definitions/models.Survey'
    type: object
  survey.FullSurveyWithQnAQuestion:
    properties:
      id:
        example: 1
        type: integer
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      title:
        example: This is question Title
        type: string
    type: object
  survey.QuestionRequest:
    properties:
      options:
        example:
        - "25"
        - "28"
        items:
          type: string
        type: array
      title:
        example: How old are you?
        type: string
    type: object
  survey.TitleRequest:
    properties:
      title:
        example: This is title
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      email:
        example: mail@mail.com
        type: string
      full_name:
        example: Yerzhan Karatayev
        type: string
      password:
        example: "123"
        type: string
    required:
    - email
    - password
    type: object
  user.TokenResponse:
    properties:
      token:
        example: dummy token
        type: string
    required:
    - token
    type: object
info:
  contact:
    name: API Support
  description: Survey service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Survey service API
  version: "1.0"
paths:
  /api/responses/my:
    get:
      consumes:
      - application/json
      description: Responded Survey list by user ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Survey'
            type: array
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Responded Survey list by user ID
      tags:
      - Responses
  /api/survey/{surveyID}/questions:
    get:
      consumes:
      - application/json
      description: Survey list for loggedin user
      parameters:
      - description: Survey ID
        in: path
        name: surveyID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Question'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Survey list by user ID
      tags:
      - Questions
    post:
      consumes:
      - application/json
      description: Question creation
      parameters:
      - description: Survey ID
        in: path
        name: surveyID
        required: true
        type: integer
      - description: Question title
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/question.TitleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add a new Question
      tags:
      - Questions
  /api/survey/{surveyID}/questions/{questionID}:
    delete:
      consumes:
      - application/json
      description: Delete Question by ID
      parameters:
      - description: Survey ID
        in: path
        name: surveyID
        required: true
        type: integer
      - description: Question ID
        in: path
        name: questionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete Question by ID
      tags:
      - Questions
    get:
      consumes:
      - application/json
      description: Question information by ID
      parameters:
      - description: Survey ID
        in: path
        name: surveyID
        required: true
        type: integer
      - description: Question ID
        in: path
        name: questionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Question'
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Question info by ID
      tags:
      - Questions
    put:
      consumes:
      - application/json
      description: Update Question by ID
      parameters:
      - description: Question title
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/question.TitleRequest'
      - description: Survey ID
        in: path
        name: surveyID
        required: true
        type: integer
      - description: Question ID
        in: path
        name: questionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update Question by ID
      tags:
      - Questions
  /api/survey/{surveyID}/responses:
    get:
      consumes:
      - application/json
      description: Response list by survey ID
      parameters:
      - description: Survey ID
        in: path
        name: surveyID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Response'
              type: array
            type: array
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Response list by survey ID
      tags:
      - Responses
    post:
      consumes:
      - application/json
      description: Response creation
      parameters:
      - description: Survey ID
        in: path
        name: surveyID
        required: true
        type: integer
      - description: Request body
        in: body
        name: requestBody
        required: true
        schema:
          items:
            $ref: '#/definitions/response.ReponseAnswerRequest'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add a new Response with answers
      tags:
      - Responses
  /api/survey/{surveyID}/responses/{responseID}:
    get:
      consumes:
      - application/json
      description: Response answers by response ID
      parameters:
      - description: Survey ID
        in: path
        name: surveyID
        required: true
        type: integer
      - description: Response ID
        in: path
        name: responseID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseAnswer'
            type: array
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Response answers by response ID
      tags:
      - Responses
  /api/surveys:
    get:
      consumes:
      - application/json
      description: Survey list for loggedin user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Survey'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Survey list by user ID
      tags:
      - Surveys
    post:
      consumes:
      - application/json
      description: Survey creation
      parameters:
      - description: Survey title
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/survey.TitleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add a new Survey
      tags:
      - Surveys
  /api/surveys/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Survey by ID
      parameters:
      - description: Survey ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete Survey by ID
      tags:
      - Surveys
    get:
      consumes:
      - application/json
      description: Survey information by ID
      parameters:
      - description: Survey ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Survey'
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Survey info by ID
      tags:
      - Surveys
    put:
      consumes:
      - application/json
      description: Update Survey by ID
      parameters:
      - description: Survey title
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/survey.TitleRequest'
      - description: Survey ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update Survey by ID
      tags:
      - Surveys
  /api/surveys/{id}/full:
    get:
      consumes:
      - application/json
      description: Survey list with Questions and Answer options
      parameters:
      - description: Survey ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/survey.FullSurveyWithQnA'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Survey list with Questions and Answer options
      tags:
      - Surveys
  /api/surveys/full:
    post:
      consumes:
      - application/json
      description: Survey creation with Questions and Answer options
      parameters:
      - description: Survey title
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/survey.FullSurveyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add a new Survey with Questions and Answer options
      tags:
      - Surveys
  /api/users:
    post:
      consumes:
      - application/json
      description: User creation
      parameters:
      - description: Create user
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.TokenResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a new user
      tags:
      - Users
  /api/users/me:
    get:
      consumes:
      - application/json
      description: User information by token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: get user info
      tags:
      - Users
  /login:
    post:
      consumes:
      - application/json
      description: User authorization
      parameters:
      - description: Login user
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.AuthCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: User authorization
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2Application:
    authorizationUrl: ""
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: http://localhost:8080/login
    type: oauth2
swagger: "2.0"
